[{"title":"正则表达式","url":"/2025/05/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"正则表达式基础[^&gt;]表示什么？🔍 [] 在正则表达式中的含义：字符类（Character Class）[] 表示字符类，用来定义一组可匹配的字符。\n基本语法：[abc]     // 匹配 a 或 b 或 c 中的任意一个字符[a-z]     // 匹配 a 到 z 的任意小写字母[0-9]     // 匹配 0 到 9 的任意数字[A-Za-z]  // 匹配任意大小写字母\n\n否定字符类：[^abc]    // 匹配除了 a、b、c 之外的任何字符[^0-9]    // 匹配非数字字符[^&gt;]      // 匹配除了 &gt; 之外的任何字符\n\n在你的例子中：[^&gt;]*\n\n分解：\n\n[^&gt;] - 字符类：匹配除了 &gt; 之外的任意一个字符\n* - 量词：表示前面的字符类可以出现 0 次或多次\n\n实际匹配示例：&lt;!-- 原始HTML --&gt;&lt;title data-rh=&quot;true&quot; class=&quot;page-title&quot;&gt;我的标题 - 知乎&lt;/title&gt;&lt;!-- 正则匹配过程 --&gt;&lt;title ← 匹配字面量 [^&gt;\t]* ← 匹配 &quot; data-rh=\\&quot;true\\&quot; class=\\&quot;page-title\\&quot;&quot; &gt; ← 匹配标签结束符 (.*?)\t← 捕获 &quot;我的标题&quot; - 知乎&lt;/title&gt;← 匹配结尾\n\n其他字符类例子：RegExp(r&#x27;[aeiou]&#x27;)     // 匹配元音字母RegExp(r&#x27;[^aeiou]&#x27;)    // 匹配非元音字母RegExp(r&#x27;[0-9]+&#x27;)      // 匹配一个或多个数字RegExp(r&#x27;[a-zA-Z_]&#x27;)   // 匹配字母或下划线RegExp(r&#x27;[^a-zA-Z0-9]&#x27;) // 匹配非字母数字字符\n\n总结：[] 就是用来定义一组字符选择的容器！\n","categories":["知识库"]},{"title":"MarkDown学习","url":"/2025/05/12/knows/MarkDown%E5%AD%A6%E4%B9%A0/","content":"标题学习# 一级标题## 二级标题### 三级标题\n\n列表学习- 无序列表- 无序列表- 无序列表\n\n1. 有序列表2. 有序列表3. 有序列表\n\n引用学习&gt; 引用学习\n\n分割线学习---\n\n图片学习![图片名称](图片路径)\n\n超链接学习[超链接名称](超链接路径)\n\n或者 跳转到新的窗口\n[超链接名称](超链接路径 &quot;新窗口&quot;)&#123;target=&quot;_blank&quot;&#125;\n\n### 代码学习\n\n```代码语言代码内容\n\n","categories":["知识库"]},{"title":"Dart基础","url":"/2025/05/13/knows/flutter/dart%E5%9F%BA%E7%A1%80/","content":"变量学习1、var 关键字类似于 JavaScript 中的 var，它可以接收任何类型的变量，但最大的不同是 Dart 中 var 变量一旦赋值，类型便会确定，则不能再改变其类型，如：\n// 定义变量var name = &quot;张三&quot;;name = 123; // 报错;\n","categories":["知识库"],"tags":["Flutter","Dart"]},{"title":"字里藏医","url":"/2025/05/13/books/zhongyi/%E5%AD%97%E9%87%8C%E8%97%8F%E5%8C%BB/","content":"\n《字里藏医》是2007年安徽教育出版社出版的图书，作者是徐文兵。该书深入浅出地介绍了中医词汇的古今之别，以帮助读者了解中医的基本知识。\n\n内容简介几千年来，我们使用的都是同样的文字，但表达的意思可能已经不同了。很多字词已经渐渐失去了它们的原意。在多数情况下，这并不会造成什么困扰，但对中医这门古老学问就不同了，它需要我们唤醒那些沉睡的文字的原意。在现代语境下，在涉外教学看病过程中，徐文兵大夫随时会遭遇熟悉字词的陌生化情形。比如说“思想”，思和想有什么区别？又比如“魂魄”，魂是什么，魄是什么？“肥”与“胖”的区别？“皮”与“肤”是一回事吗？    要研究中医，发皇古意，就必须先从最基本的词汇入手，正义严辞。《字里藏医》就是这样一本以深入浅出的文字厘清中医最基本的词汇，恢复中医本来面目的启蒙书。\n下载地址字里藏医.txt (访问密码: 5098)\n","categories":["中医"],"tags":["徐文兵"]},{"title":"adb 常用操作","url":"/2025/05/23/knows/flutter/%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/","content":"列出虚拟设备adb devices\n\n连接虚拟设备,进入 shelladb -s 6c49ee85 shell\n\n保存文件String? html = await webView.getHtml();setState(() &#123;htmlContent = html;&#125;);print(&#x27;Full Page HTML ($&#123;html?.length ?? 0&#125; characters): $html&#x27;);String las = html!.substring(html.length - 1000);print(&quot;last 1000: $las&quot;);final directory = await getApplicationDocumentsDirectory();final filePath = &#x27;$&#123;directory.path&#125;/douyin_html.html&#x27;;// 3. 写入文件await File(filePath).writeAsString(html ?? &#x27;&#x27;);print(&#x27;HTML saved to: $filePath&#x27;);\n\n打印显示 &#x2F;data&#x2F;user&#x2F;0&#x2F;wang.awake.video_fetcher&#x2F;app_flutter&#x2F;douyin_html.html\n用 adb 命令查看文件run-as wang.awake.video_fetcher\n\n会进入到包目录，此时可以查看包\n用 adb 下载虚拟机的文件adb exec-out run-as wang.awake.yidong cat databases/app.db &gt; app.db\n\n这样就将 app.db 下载到了本地\n注意：只有在 root 或 debug 模式下才能用进入到包目录下载文件\n","categories":["知识库"],"tags":["Flutter"]},{"title":"加载assets文件","url":"/2025/05/26/knows/flutter/%E5%8A%A0%E8%BD%BDassets%E6%96%87%E4%BB%B6/","content":"将资源文件加到 assets 目录如 assets&#x2F;key&#x2F;public.pem 文件\n读取资源文件读取前先在 pubspec.yaml 中配置\nflutter:    assets:        - assets/key/public.pem\n\n读取资源文件import &#x27;package:flutter/services.dart&#x27;;String publicKey = await rootBundle.loadString(&#x27;assets/key/public.pem&#x27;);\n","categories":["知识库"],"tags":["Flutter"]},{"title":"Flutter基础组件","url":"/2025/05/30/knows/flutter/%E5%B8%B8%E7%94%A8%E7%B1%BB/","content":"Completer其作用是创建 Future 对象，并且能手动控制该对象的完成状态 1 。借助 Completer，开发者能够在异步操作完成后，将结果传递给对应的 Future 对象，这样依赖该 Future 的代码就可以继续执行。\n下面是一个简单的示例代码，展示了如何使用 Completer：\nimport &#x27;dart:async&#x27;;void main() &#123;  // 创建一个 Completer 对象  Completer&lt;String&gt; completer = Completer&lt;String&gt;();  // 获取 Completer 关联的 Future 对象  Future&lt;String&gt; future = completer.future;  // 为 Future 对象添加回调函数  future.then((value) &#123;    print(&#x27;Future 完成，结果是: $value&#x27;);  &#125;);  // 模拟异步操作  Future.delayed(Duration(seconds: 2), () &#123;    // 完成 Completer，并传递结果    completer.complete(&#x27;操作完成&#x27;);  &#125;);&#125;\n\n在这个示例中，我们创建了一个 Completer 对象，获取其关联的 Future 对象，并为该 Future 添加了一个回调函数。接着模拟了一个异步操作，在操作完成后调用 completer.complete 方法，将结果传递给 Future ，触发回调函数的执行。\n","categories":["知识库"],"tags":["Flutter"]},{"title":"Flutter基础组件","url":"/2025/05/12/knows/flutter/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/","content":"文本组件\nText：用于显示文本。\nRichText：用于显示富文本，支持多种样式。\nDefaultTextStyle：用于设置默认文本样式。\nSelectableText：用于显示可选择的文本。\nFittedBox：用于调整文本大小以适应可用空间。\nTextSpan：用于构建富文本的文本片段。\nTextStyle：用于定义文本的样式，如字体、大小、颜色等。\nTextDecoration：用于定义文本的装饰，如下划线、删除线等。\nTextAlign：用于定义文本的对齐方式，如左对齐、右对齐、居中对齐等。\nTextOverflow：用于定义文本溢出时的处理方式，如截断、省略号等。\nTextDirection：用于定义文本的方向，如左到右、右到左等。\nTextScaleFactor：用于定义文本的缩放因子。\nTextWidthBasis：用于定义文本的宽度基准。\nTextHeightBehavior：用于定义文本的高度行为。\nTextBaseline：用于定义文本的基线。\nTextDecorationStyle：用于定义文本装饰的样式，如实线、虚线等。\nTextDecorationColor：用于定义文本装饰的颜色。\n\n布局组件\nContainer：用于创建一个矩形的容器，用于包裹其他组件。\nPadding：用于在容器内添加内边距，用于调整组件的位置。\nMargin：用于在容器外添加外边距，用于调整组件的位置。\n\nSingleChildScrollView\nSingleChildScrollView：用于创建一个单子滚动视图，用于包裹其他组件。\n\n简介SingleChildScrollView 是 Flutter 中的滚动组件。其作用是包裹子组件，当子组件内容超过屏幕可视区域时，允许用户通过滚动查看完整内容。\n当前代码中， SingleChildScrollView 作为 Scaffold 的 body 属性值，内部通过 Padding 和 Column 布局容纳其他子控件（如 TextField 等），确保页面内容超出屏幕时可滚动浏览。\n\nListView：用于创建一个列表视图，用于包裹其他组件。\nGridView：用于创建一个网格视图，用于包裹其他组件。\nStack：用于创建一个堆叠视图，用于包裹其他组件。\nPositioned：用于创建一个可定位的组件，用于调整组件的位置。\n\n交互组件\nGestureDetector：用于检测用户的手势，如点击、长按、滑动等。\nInkWell：用于创建一个可点击的 ink 效果，用于响应用户的手势。\nDraggable：用于创建可拖动的组件。\nDropTarget：用于创建可接收拖动组件的目标。\nDragTarget：用于创建可接收拖动组件的目标。\nDragSource：用于创建可拖动的组件。\nDragSourceListener：用于监听拖动组件的状态。\nDropTargetListener：用于监听接收拖动组件的状态。\nDragTargetAcceptor：用于接受拖动组件的目标。\nDragTargetAcceptorListener：用于监听接收拖动组件的状态。\nDragTargetAcceptorDelegate：用于定义接收拖动组件的目标的行为。\nDragTargetAcceptorDelegateListener：用于监听接收拖动组件的状态。\nDragTargetAcceptorDelegateBuilder：用于构建接收拖动组件的目标的行为。\n\n动画组件\nAnimatedContainer：用于创建一个可动画的容器，用于调整组件的位置、大小、颜色等。\nAnimatedOpacity：用于创建一个可动画的透明度，用于调整组件的透明度。\nAnimatedPositioned：用于创建一个可动画的位置，用于调整组件的位置。\nAnimatedPadding：用于创建一个可动画的内边距，用于调整组件的位置。\nAnimatedMargin：用于创建一个可动画的外边距，用于调整组件的位置。\nAnimatedSize：用于创建一个可动画的大小，用于调整组件的大小。\nAnimatedAlign：用于创建一个可动画的对齐方式，用于调整组件的位置。\n\n弹窗组件\nAlertDialog：用于创建一个对话框，用于显示提示信息。\nSimpleDialog：用于创建一个简单的对话框，用于显示提示信息。\nBottomSheet：用于创建一个底部弹出的对话框，用于显示提示信息。\nDialog：用于创建一个对话框，用于显示提示信息。\nSnackBar：用于创建一个弹出的提示信息，用于显示提示信息。\nBottomAppBar：用于创建一个底部弹出的对话框，用于显示提示信息。\nBottomNavigationBar：用于创建一个底部导航栏，用于显示提示信息。\nBottomNavigationBarItem：用于创建一个底部导航栏的条目，用于显示提示信息。\n\n","categories":["知识库"],"tags":["Flutter"]},{"title":"常见目录","url":"/2025/07/02/knows/flutter/%E5%B8%B8%E8%A7%81%E7%9B%AE%E5%BD%95/","content":"常见目录Android 标准目录说明：DCIM - 所有 Android 设备都有，相机默认存储目录Pictures - 大部分设备有，但不是强制要求Movies - 部分设备有，用于存储视频Download - 所有设备都有，下载目录\nIOS 标准目录说明：iOS 没有传统的文件目录结构，使用相册概念relativePath 在 iOS 上是相册名称，不是文件路径权限管理更严格，需要专门的照片库权限iOS 14+ 引入了有限权限模式自定义相册创建失败时，应该有备用策略（保存到默认相册）沙盒机制限制，只能通过系统 API 访问照片库这就是为什么我们在处理 iOS 时需要与 Android 完全不同的策略！\n应用沙盒应用沙盒&#x2F;├── Documents&#x2F; # 用户文档，会被 iTunes 备份├── Library&#x2F;│ ├── Caches&#x2F; # 缓存文件，系统可能清理│ └── Preferences&#x2F; # 应用偏好设置├── tmp&#x2F; # 临时文件，系统会定期清理└── SystemData&#x2F; # 系统数据（iOS 14+）\n照片相册类型&#x2F;&#x2F; 系统预置相册（不能删除）‘Camera Roll’ &#x2F;&#x2F; 相机胶卷（主相册）‘Favorites’ &#x2F;&#x2F; 收藏‘Recently Added’ &#x2F;&#x2F; 最近添加‘Screenshots’ &#x2F;&#x2F; 屏幕截图‘Selfies’ &#x2F;&#x2F; 自拍‘Live Photos’ &#x2F;&#x2F; Live 照片‘Portrait’ &#x2F;&#x2F; 人像‘Panoramas’ &#x2F;&#x2F; 全景‘Videos’ &#x2F;&#x2F; 视频‘Slo-mo’ &#x2F;&#x2F; 慢动作‘Time-lapse’ &#x2F;&#x2F; 延时摄影‘Bursts’ &#x2F;&#x2F; 连拍‘Recently Deleted’ &#x2F;&#x2F; 最近删除\n应用// 创建/保存到自定义相册final result = await PhotoManager.editor.saveImage(  imageBytes,  filename: fileName,  title: fileName,  relativePath: &#x27;易动收藏&#x27;, // 相册名称，不是路径);\n","categories":["知识库"],"tags":["Flutter"]},{"title":"视频播放测试地址","url":"/2025/05/20/knows/flutter/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95%E5%9C%B0%E5%9D%80/","content":"最近在开发视频播放相关的业务功能，开发测试时，需要涉及到 MP4、M3U8 等视频格式。我每次找测试视频地址时，都要找很久，现在把我在网上收集到的 MP4、M3U8 格式视频地址放在这里，希望帮助到正在进行视频播放开发的你。\nMP4 格式海洋：http://vjs.zencdn.net/v/oceans.mp4\n西瓜视频 Demo：https://sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/mp4/xgplayer-demo-360p.mp4\n大兔子：http://www.w3school.com.cn/example/html5/mov_bbb.mp4\n大灰熊：https://www.w3schools.com/html/movie.mp4\n冰川：https://media.w3.org/2010/05/sintel/trailer.mp4\n新闻视频 1：https://stream7.iqilu.com/10339/upload_transcode/202002/09/20200209105011F0zPoYzHry.mp4\n新闻视频 2：https://stream7.iqilu.com/10339/upload_transcode/202002/09/20200209104902N3v5Vpxuvb.mp4\nM3U8 格式西瓜播放器 Demo：https://sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/hls/xgplayer-demo.m3u8\n大白兔：https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8\n","categories":["知识库"],"tags":["Flutter","视频"]},{"title":"打包配置sha1","url":"/2025/05/26/knows/flutter/%E9%85%8D%E7%BD%AEsha1/","content":"主要参考：https://juejin.cn/post/7129495755207180319\n生成 key 目录mkdir ~/dapp/keys/\n\n生成私钥keytool -genkey -v -keystore ~/dapp/keys/prod_key.jks -keyalg RSA -keysize 2048 -validity 100000 -alias prod_key\n\nlocal.properties 添加上述设置storePassword = xxxxxxkeyPassword = xxxxxxkeyAlias = prod_keystoreFile = /xxxx/xxxx/dapp/keys/prod_key.jks\n\n到项目下的 android&#x2F;app&#x2F;build.gradle 中添加import java.util.Properties...android &#123;    signingConfigs &#123;        create(&quot;release&quot;) &#123;            // 加载 local.properties 文件            val localProperties = Properties().apply &#123;                load(rootProject.file(&quot;local.properties&quot;).inputStream())            &#125;            // 读取配置项            storeFile = file(localProperties.getProperty(&quot;storeFile&quot;))            storePassword = localProperties.getProperty(&quot;storePassword&quot;)            keyAlias = localProperties.getProperty(&quot;keyAlias&quot;)            keyPassword = localProperties.getProperty(&quot;keyPassword&quot;)        &#125;    &#125;    buildTypes &#123;        release &#123;            signingConfig = signingConfigs.getByName(&quot;release&quot;)        &#125;        debug &#123;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)        &#125;    &#125;&#125;\n\n测试签名./gradlew signingReport\n\n打包flutter build apk --release\n","categories":["知识库"],"tags":["Flutter"]},{"title":"Flutter配置相关","url":"/2025/05/20/knows/flutter/%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/","content":"配置 Java 环境1、安装 Java\nbrew install openjdk@21\n\n2、配置环境变量写进.bash_profile\nexport JAVA_HOME=/opt/homebrew/opt/openjdk@21export PATH=$JAVA_HOME/bin:$PATH\n\n3、验证\njava -version\n\n注意：gradle 版本与 java 版本要匹配https://docs.gradle.org/current/userguide/compatibility.html#java\n换源build.gradle.kts\nallprojects &#123;    repositories &#123;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/public&quot;) &#125;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/google&quot;) &#125;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;) &#125;    &#125;&#125;\n\nsettings.gradle.kts\nrepositories &#123;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/public&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/google&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;) &#125;&#125;\n\nbuild.gradle.kts 文件中的仓库配置是用于项目所有模块的全局配置，而 settings.gradle.kts 中的配置是用于插件管理的。在 Gradle 项目中，通常需要在这两个地方都配置仓库地址，以确保所有依赖项都能正确下载。建议将 build.gradle.kts 中的仓库配置也替换为阿里云镜像源，以保持一致性并提高构建速度。\n出错\nWhat went wrong:Plugin [id: ‘com.android.application’, version: ‘8.7.0’, apply: false] was not found in any of the following sources:\n\n\nGradle Core Plugins (plugin is not in ‘org.gradle’ namespace)\nIncluded Builds (No included builds contain this plugin)\nPlugin Repositories (could not resolve plugin artifact ‘com.android.application:com.android.application.gradle.plugin:8.7.0’)Searched in the following repositories:maven(https://maven.aliyun.com/repository/public)maven2(https://maven.aliyun.com/repository/google)maven3(https://maven.aliyun.com/repository/gradle-plugin)\n\n错误信息显示无法找到 com.android.application 插件，这是因为阿里云镜像可能没有完全同步 Google 的仓库内容。建议在 settings.gradle.kts 中保留 Google 的官方仓库，同时使用阿里云镜像。以下是修改后的配置：\nrepositories &#123;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/public&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/google&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;) &#125;    google()    mavenCentral()&#125;\n\n查看 Android 模拟器版本号的两种方法：1、ADB 查看\nadb shell getprop ro.build.version.releaseadb shell getprop ro.build.version.sdk\n\n第一条命令输出 Android 系统版本（如 13），第二条输出 API 级别（如 33）\n2、在模拟器界面查看\n\n打开模拟器\n进入 Settings → System → About phone → Android version\n连续点击 “Build number” 7 次可解锁开发者选项\n\nAndroid 存储权限变更&lt;uses-permission android:name=&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_VIDEO&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_AUDIO&quot; /&gt;\n\n如果 ios 目录被删除，应该怎么办？flutter create --platform ios .\n\n这样会在当前目录下生成一个新的 ios 目录，其中包含了 Flutter 所需的所有文件和配置。\n","categories":["知识库"],"tags":["Flutter","Java"]},{"title":"虚拟机相关","url":"/2025/05/30/knows/flutter/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3/","content":"手动启动虚拟机1. 列出虚拟机# 列出所有已创建的虚拟设备emulator -list-avds# 或者使用 avdmanageravdmanager list avd\n\n2. 启动虚拟机# 基本启动emulator -avd [AVD名称]# 后台启动（不阻塞命令行）emulator -avd [AVD名称] &amp;# Windows 后台启动start emulator -avd [AVD名称]# 指定分辨率启动emulator -avd [AVD名称] -skin 1080x1920# 冷启动（清除状态）emulator -avd [AVD名称] -wipe-data# 无声启动emulator -avd [AVD名称] -no-audio# 显示详细日志emulator -avd [AVD名称] -verbose\n\n3.性能相关# 启用硬件加速emulator -avd [AVD名称] -gpu host# 分配更多内存emulator -avd [AVD名称] -memory 2048# 启用多核支持emulator -avd [AVD名称] -cores 4# 启用快速启动emulator -avd [AVD名称] -no-snapshot-save\n","categories":["知识库"],"tags":["Flutter"]},{"title":"误添加的文件，怎么删除","url":"/2025/05/16/knows/git/%E8%AF%AF%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%87%E4%BB%B6/","content":"误添加的文件，怎么删除将 .env 配置文件添加到了 git 仓库上，因为里面有重要的配置信息，所以需要删除。\n\n先将.env 文件从 git 仓库中删除\n\ngit rm --cached .env\n\n\n推送一次\n\ngit commit -m &quot;Remove .env file from repository&quot;git push origin main\n","categories":["知识库"],"tags":["git"]},{"title":"git问题解决","url":"/2025/05/16/knows/git/git%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"git 问题解决\ngit push –set-upstream origin master\nPlease contact your system administrator.\nAdd correct host key in &#x2F;Users&#x2F;xxx&#x2F;.ssh&#x2F;known_hosts to get rid of this message.\nOffending RSA key in &#x2F;Users&#x2F;xxx&#x2F;.ssh&#x2F;known_hosts:3\nHost key for github.com has changed and you have requested strict checking.\nHost key verification failed.\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n\n应该怎么处理\n这个问题是在执行 git push 命令时，因远程主机密钥更改导致的主机密钥验证失败。以下是几种处理方法：\n1、手动删除错误密钥可以使用以下命令删除 known_hosts 文件中错误的密钥：\n2、使用 ssh-keygen 重新生成密钥 或 将 SSH 密钥添加到 GitHub 账户生成新密钥ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n\n将 SSH 密钥添加到 GitHub 账户cat ~/.ssh/id_ed25519.pub\n\n3、测试连接ssh -T git@github.com\n","categories":["知识库"],"tags":["git"]},{"title":"npm相关","url":"/2025/07/02/knows/node&js/npm%E7%9B%B8%E5%85%B3/","content":"项目运行在 node 18 下出错16 下正常，但 18 下出错\n用18会提示node:internal/crypto/hash:67this[kHandle] = new _Hash(algorithm, xofLen);^Error: error:0308010C:digital envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)at Object.createHash (node:crypto:133:10)at BulkUpdateDecorator.hashFactory (/Users/lyq89566/prod/prodweb/ucaptain-fe/node_modules/@umijs/deps/compiled/webpack/5/bundle5.js:184161:18)at BulkUpdateDecorator.update (/Users/lyq89566/prod/prodweb/ucaptain-fe/node_modules/@umijs/deps/compiled/webpack/5/bundle5.js:184062:50)at /Users/lyq89566/prod/prodweb/ucaptain-fe/node_modules/@umijs/deps/compiled/webpack/5/bundle5.js:107101:9at /Users/lyq89566/prod/prodweb/ucaptain-fe/node_modules/@umijs/deps/compiled/webpack/5/bundle5.js:33829:16at FSReqCallback.readFileAfterClose [as oncomplete] (node:internal/fs/read_file_context:68:3) &#123;opensslErrorStack: [ &#x27;error:03000086:digital envelope routines::initialization error&#x27; ],library: &#x27;digital envelope routines&#x27;,reason: &#x27;unsupported&#x27;,code: &#x27;ERR_OSSL_EVP_UNSUPPORTED&#x27;&#125;Node.js v18.0.0\n\n可以在命令行下直接运行\nexport NODE_OPTIONS=&quot;--openssl-legacy-provider --max-old-space-size=8192&quot;npm run dev\n\n在.env.local 下运行\nNODE_OPTIONS=--openssl-legacy-provider --max-old-space-size=8192\n","categories":["知识库"],"tags":["npm"]},{"title":"禅的世界-圣严法师","url":"/2025/05/12/books/%E4%BD%9B%E5%AD%A6/%E7%A6%85%E7%9A%84%E4%B8%96%E7%95%8C/","content":"禅的世界-圣严法师\n释圣严，或尊称为圣严“法师”（1931年1月22日－2009年2月3日），俗名张保康，江苏南通人，佛学“大师”，教育家，佛教“弘法大师”，日本立正大学博士，也是禅宗曹洞宗的第五十代传人、临济宗的第五十七代传人、台湾法鼓山的创办人，法鼓山的弟子信众尊称为“师父”。\n\n禪的世界 - 聖嚴法師.pdf (访问密码: 5098)\n","categories":["佛学"]},{"title":"pyenv 使用","url":"/2025/05/14/knows/python/pyenv%E4%BD%BF%E7%94%A8/","content":"pyenv 使用要使用 pyenv 创建一个名为 ai 的新虚拟环境，您可以按照以下步骤操作：\n\n确保已安装 pyenv 和 pyenv-virtualenv首先，确保您已经在系统中安装了 pyenv 和 pyenv-virtualenv。如果还没有安装，可以参考以下步骤进行安装：安装 pyenv\n\n使用 Homebrew 安装（适用于 macOS）brew install pyenv\n\n或者使用官方安装脚本curl https://pyenv.run | bash\n\n安装完成后，根据提示将以下内容添加到您的 shell 配置文件（如 .bashrc, .zshrc）中：\nexport PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init --path)&quot;eval &quot;$(pyenv virtualenv-init -)&quot;\n\n然后，重新加载配置文件：source ~/.bashrc  # 或者 source ~/.zshrc\n\n安装 pyenv-virtualenv如果您使用的是 pyenv 官方安装脚本，pyenv-virtualenv 通常已经包含在内。如果没有，可以通过以下方式安装：\n使用 Homebrew 安装（适用于 macOS）brew install pyenv-virtualenv\n\n或者通过 PyPI 安装\n# 或者通过 PyPI 安装pip install pyenv-virtualenv\n\n\n安装所需的 Python 版本在创建虚拟环境之前，确保您已经安装了所需的 Python 版本。例如，安装 Python 3.10.0：\n\npyenv install 3.10.0\n\n您可以通过以下命令查看可用的 Python 版本：\npyenv install --list`\n\n\n创建虚拟环境使用以下命令创建一个名为 ai 的虚拟环境，并指定 Python 版本（例如 3.10.0）：\n\npyenv virtualenv 3.10.0 ai\n\n如果您希望虚拟环境使用系统默认的 Python 版本，可以省略版本号：\npyenv virtualenv ai\n\n\n激活虚拟环境激活刚刚创建的 ai 虚拟环境：\n\npyenv activate ai\n\n激活后，您的命令提示符通常会显示当前激活的虚拟环境名称 (ai)。 5. 验证虚拟环境您可以通过以下命令验证当前 Python 版本和虚拟环境：\npython --version\n\n输出应类似于：Python 3.10.0\n\n安装项目依赖在虚拟环境中，您可以像平常一样使用 pip 安装所需的包。例如：\n\npip install numpy pandas matplotlib\n\n\n退出虚拟环境当您完成工作并希望退出虚拟环境时，可以使用以下命令：\n\npyenv deactivate\n\n\n列出所有虚拟环境要查看系统中所有已创建的虚拟环境，可以使用：\n\npyenv virtualenvs\n\n\n删除虚拟环境如果您不再需要某个虚拟环境，可以使用以下命令删除它：\n\npyenv uninstall ai\n\npyenv virtualenv-delete sla\n\n常见问题排查pyenv: command not found确保已将 pyenv 的路径添加到您的 shell 配置文件中，并重新加载配置。virtualenv: command not found确保已安装 pyenv-virtualenv 并正确初始化。虚拟环境未激活确认使用 pyenv activate ai 激活虚拟环境，并检查命令提示符是否显示 (ai)。\n通过以上步骤，您应该能够成功使用 pyenv 创建和管理名为 ai 的虚拟环境。如果您遇到任何问题，请随时提问！\nenviron 库有缓存改了环境变量，在本地调试时一定要先清空缓存\nimport environimport osfrom pathlib import Pathenv = environ.Env(DEBUG=(bool, False))env_file = os.path.join(Path(__file__).resolve().parent.parent, &#x27;.env&#x27;)env.read_env(env_file, overwrite=True)  # 使用 overwrite=True 强制重新读取\n","categories":["知识库","python"],"tags":["pyenv"]},{"title":"celery 使用","url":"/2025/06/11/knows/python/celery/","content":"celery 使用beat 和 worker 一起使用\ncelery -A projectname worker -l DEBUG -B -l DEBUG\n\n分开执行\ncelery -A projectname beat -l DEBUG\n\ncelery -A srereport worker -Q reports_queue -l DEBUG\n\n上面的-Q 是配置了队列参数\n有队列时，注意要在代码里加上队列名@shared_task(queue=&#x27;reports_queue&#x27;)def some_task(method_type: str):\n\n根据 task_id 查看任务状态celery -A srereport inspect query_task 03ae7485-a86b-4d6d-aaee-1bda50978a26\n","categories":["知识库","python"],"tags":["celery"]},{"title":"supervisor配置问题总结","url":"/2025/05/13/knows/python/supervisor%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","content":"问题 1：supervisor 启动 gunicorn 报错：显示\n\ngunicorn FATAL Exited too quickly (process log may have details)但查找进程显示有 gunicorn 进程\n\nps -ef | grep gunicorn\n\n通过 AI 分析：\n\ndaemon &#x3D; True 与 Supervisor 冲突Gunicorn 的 daemon &#x3D; True：会让 Gunicorn 以后台守护进程方式运行（脱离终端），而 Supervisor 本身会管理进程的前台运行。两者同时启用时，Supervisor &gt; 会认为 Gunicorn 已退出（因为 Gunicorn 主进程已退出），导致标记为 FATAL。解决方案：移除 gunicorn 配置文件里的 daemon &#x3D; True，让 Gunicorn 以前台进程方式运行，由 Supervisor 管理。\n\n问题 2：supervisor 启动的项目，还需要指定 pidfile 吗？：显式指定 pidfile,但查看目录并不会生成 pid 文件查 AI：\n\n当你使用 Supervisor 管理应用时，通常不需要再为应用单独配置 pidfile。Supervisor 本身会自动管理所有被监控进程的 PID 文件（进程标识符文件），用于跟踪进程状态（如启动、停止、重启）。以下是详细说明：为什么不需要应用自定义 pidfile？\n\nSupervisor 自动管理 PID 文件Supervisor 会为每个被管理的程序生成一个 .pid 文件，默认路径为：\n\n\n\n/var/run/supervisor/supervisord.pid/tmp/supervisor-&lt;program&gt;.pid\n\n或根据你的配置指定路径。作用：Supervisor 使用 .pid 文件来记录进程的 PID，确保进程状态可追踪。\n\n\n\n应用自定义 pidfile 的潜在问题冲突风险：如果应用（如 Gunicorn）也配置了 pidfile，可能导致：Supervisor 和应用同时写入同一文件，引发冲突。应用退出后，Supervisor 的 .pid 文件可能残留，导致下次启动失败。冗余操作：Supervisor 已经管理了进程生命周期，应用的 pidfile 通常是多余的。\n\n\n参考：CentOS+Django+uWSGI+Celery+Supervisor 配置\n","categories":["知识库","python"],"tags":["supervisor","gunicorn"]}]